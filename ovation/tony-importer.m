%% In your startup.m file, you can add the proper import code:
% addpath <path/to/ovation-matlab>
% import ovation.* % the matlab api
% import us.physion.ovation.*
% import us.physion.ovation.api.*

c = Ovation.newDataStoreCoordinator();
c.authenticateUser('Anthony_Azevedo@hms.harvard.edu', 'JunkM4il')
context = c.getContext();
%%
dsc = Ovation.newDataStoreCoordinator()
dsc.authenticateUser('anthony_azevedo@hms.harvard.edu', 'JunkM4il').get()
context = dsc.getContext()

%
% context = NewDataContext();

%% Create a project - this is a toplevel organizational tool, for managing experiments. 
% Many experiments can belong to a project, and many projects can contain the same experiment

project = context.insertProject('Fly Sound', 'Measure sound responses in neurons in Drosophila auditory system', datetime(2013,7,1,8,0,0));

%% Unfortunately searching capability has not been implemented yet for this beta,
% so to get a reference to this project in your next session, you will have
% to itertate all the projects and find yours.

it2array(context.getProjects())

% You can optionally keep in your startup file the UUID of any objecs you
% use frequently, so as to not have to dig around for it each session. 

projectUuid = project.getUuid();
context.getObjectWithUuid(projectUuid)

%% Create an experiment

experiment = project.insertExperiment('B1 neurons from GH86', datetime(2013,7,1,8));

% Set an EquipmentSetup object on the Experiment. 
% This object contains any device or equipment information that didn't change over the course of the experiment
% This is also a good place to store software and firmware versions, devices that were used and identifying information about them (make, manufacturer, etc) 

experiment.setEquipmentSetup(struct2map(equipmentSetupStruct))

%% Create two protocols. 
% Protocols are optional, and can be attached at any point on the TimelineElement hierarchy (Experiments, EpochGroups, Epochs). 
% We will create a protocol for the Source generation epoch, and the piezoSine EpochGroup.

piezoSineProtocol = context.insertProtocol('PiezoSine', 'Move antenna with Sine wave');
sourceGenerationProtocol = context.insertProtocol('FlySoundProtocol', 'general protocol class');

%% Create the Sources used during the PiezoSine epochs
% Creating top-level sources are easy - one line

sourceParent = context.insertSource('Fly', '1');

% Creating children sources are more work. This is because we want to store
% any relevant information about the generation of that Source. For
% example, the protocol used to generate the source, and the date it was
% done, as well as any protocol/device paramters associated with the generation

load('C:\Users\Anthony Azevedo\Raw_Data\01-Jul-2013\01-Jul-2013_F1_C1\PiezoSine_Raw_01-Jul-2013_F1_C1_26.mat')
d = dir([name '.mat'])
a = datevec(d.datenum)
start = datetime(a);
a(end) = a(end)+params.durSweep;
fin = datetime(a);

sourceGenerationEpochGroup = experiment.insertEpochGroup('Source generation', datetime(2013,7,1,8), [], [], []);
inputSources = struct('fly', sourceParent)

sourceGenerationProtocolParams = struct2map(params);
sourceGenerationDeviceParams = struct2map(equipmentSetupStruct);
sourceGenerationEpoch = sourceGenerationEpochGroup.insertEpoch(...
							struct2map(inputSources),...
							[],...
							datetime(2013,7,1,8),... 
							datetime(2013,7,1,8),... 
							sourceGenerationProtocol,... 
							sourceGenerationProtocolParams,... 
							sourceGenerationDeviceParams);

                        
sourceChild = sourceParent.insertSource(struct2map(inputSources),...
			sourceGenerationEpoch,...
			'F1',...% name of the resulting source within the scope of the epoch
			'C1',...% label of the resulting source
			'F1_C1');% id
% TA: how should I build this epch for input?
        
        
%% Create an epoch group to contain the PiezoSine epochs
% I made the choice to attach the PiezoSine protocol here (instead of at 
% the Experiment). For data generated by a different protocol during this 
% Experiment (PiezoStep, Sweep, etc), I imagine you'd create a new sibling
% epochGroup, with a new protocol.

piezoSineProtocolParams = struct2map(params);
piezoSineDeviceParams = struct2map(equipmentSetupStruct);

epochGroup = experiment.insertEpochGroup('PiezoSine',...
                                        datetime(2013,7,1,8),...
                                        piezoSineProtocol,... 
                                        piezoSineProtocolParams,...
                                        piezoSineDeviceParams);

% Then, when you insert epochs, you don't need to specify a protocol

piezoSineEpoch = epochGroup.insertEpoch(...					
					start,... 
                    fin,... 
					[], [], []);

%% Adding Numeric data
% Device names are optional, and should correlate with keys in the
% EquipmentSetup map

deviceNames = array2set(['PiezoActuator']);
sourceNames = array2set(['F1']);
numericData = NumericData();
numericData.addData('sgsmonitor', sgsmonitor', java.lang.String('V'), params.sampratein, java.lang.String('Hz'));
piezoSineEpoch.insertNumericMeasurement(name,...
                                        sourceNames,...
                                        deviceNames,...
                                        numericData);
                                    
numericData = NumericData();
numericData.addData('voltage', voltage', java.lang.String('mV'),  params.sampratein, java.lang.String('Hz'));
piezoSineEpoch.insertNumericMeasurement(name,...
                                        sourceNames,...
                                        deviceNames,...
                                        numericData);
 
% TA: Where should I put the genotype of the fly (Source - child of fly?)?
% TA: what should the device names be ("Piezo Actuator" or more specific "Physik Instrumente P840.20"?
% TA: what are typical device params like?
% TA: woah!  This didn't work!  cause a bunch of errors
